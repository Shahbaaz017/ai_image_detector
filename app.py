import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image, ImageOps
import numpy as np
import io

# --- THIS MUST BE THE FIRST STREAMLIT COMMAND ---
st.set_page_config(layout="wide", page_title="AI vs Real Image Detector")
# -------------------------------------------------

# --- Configuration ---
MODEL_PATH = "best_art_classifier_final_polish.keras" # Or your actual model name
IMAGE_WIDTH = 256
IMAGE_HEIGHT = 256
CLASS_NAMES = ["AI-Generated", "Real"]

# --- Load Model ---
@st.cache_resource # This is fine here, as it's a decorator for a function definition
def load_keras_model(model_path):
    """Loads the Keras model from the specified path."""
    try:
        model = load_model(model_path)
        print("Model loaded successfully!")
        return model
    except Exception as e:
        # Using st.error here is fine as set_page_config has already run
        st.error(f"Error loading model: {e}")
        print(f"Error loading model: {e}")
        return None

model = load_keras_model(MODEL_PATH) # Calling the function is also fine here

# --- Image Preprocessing Function ---
def preprocess_image(image_pil, target_size=(IMAGE_WIDTH, IMAGE_HEIGHT)):
    """
    Preprocesses a PIL image to the format expected by the model.
    """
    try:
        if image_pil.mode != "RGB":
            image_pil = image_pil.convert("RGB")
        img_resized = image_pil.resize(target_size, Image.Resampling.LANCZOS)
        img_array = np.array(img_resized)
        img_array = img_array / 255.0
        img_batch = np.expand_dims(img_array, axis=0)
        return img_batch.astype(np.float32)
    except Exception as e:
        st.error(f"Error preprocessing image: {e}") # Fine here
        return None

# --- Streamlit App Interface ---
# All other st.title, st.write, etc. commands come AFTER set_page_config

st.title("ðŸŽ¨ AI vs. Real Art Image Detector")
st.write("""
Upload an image of an artwork, and this app will predict whether it's likely
to be a real piece of art or generated by an AI.
This model achieved a validation AUC of approximately 0.741.
""")

st.sidebar.header("Upload Image")
uploaded_file = st.sidebar.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

col1, col2 = st.columns(2)

if model is None:
    # This st.error is fine as set_page_config already ran
    st.error("Model could not be loaded. Please check the console for errors and ensure the model path is correct.")
else:
    if uploaded_file is not None:
        try:
            image_bytes = uploaded_file.getvalue()
            image_pil = Image.open(io.BytesIO(image_bytes))

            with col1:
                st.subheader("Uploaded Image:")
                st.image(image_pil, caption="Your Uploaded Image", use_column_width='always')

            with col2:
                st.subheader("Prediction:")
                with st.spinner("Analyzing the image..."):
                    processed_image_batch = preprocess_image(image_pil)
                    if processed_image_batch is not None:
                        prediction_raw = model.predict(processed_image_batch)
                        probability_real = prediction_raw[0][0]

                        # st.write(f"Raw prediction output: `{prediction_raw[0]}`") # For debugging

                        if probability_real > 0.5:
                            predicted_class = CLASS_NAMES[1] # "Real"
                            confidence = probability_real * 100
                            st.success(f"Prediction: **{predicted_class}**")
                            st.info(f"Confidence it's Real: **{confidence:.2f}%**")
                            st.progress(probability_real)
                        else:
                            predicted_class = CLASS_NAMES[0] # "AI-Generated"
                            confidence = (1 - probability_real) * 100
                            st.error(f"Prediction: **{predicted_class}**")
                            st.info(f"Confidence it's AI-Generated: **{confidence:.2f}%**")
                            st.progress(1 - probability_real)

                        st.markdown("---")
                        st.markdown(f"**How to interpret:**")
                        st.markdown(f"- Probability of being 'Real': **{(probability_real * 100):.2f}%**")
                        st.markdown(f"- Probability of being 'AI-Generated': **{((1 - probability_real) * 100):.2f}%**")
        except Exception as e:
            st.error(f"An error occurred processing the uploaded file: {e}")
            print(f"Error with uploaded file: {e}")
    else:
        with col1:
            st.info("Upload an image using the sidebar to see a prediction.")

st.sidebar.markdown("---")
st.sidebar.markdown("Created with your Fine-Tuned Model.")